// Generated by gencpp from file big_actor_msgs/Connectivity.msg
// DO NOT EDIT!


#ifndef BIG_ACTOR_MSGS_MESSAGE_CONNECTIVITY_H
#define BIG_ACTOR_MSGS_MESSAGE_CONNECTIVITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <big_actor_msgs/Network.h>

namespace big_actor_msgs
{
template <class ContainerAllocator>
struct Connectivity_
{
  typedef Connectivity_<ContainerAllocator> Type;

  Connectivity_()
    : timeStamp(0)
    , srcVehicleId(0)
    , dstVehicleId(0)
    , network()  {
    }
  Connectivity_(const ContainerAllocator& _alloc)
    : timeStamp(0)
    , srcVehicleId(0)
    , dstVehicleId(0)
    , network(_alloc)  {
    }



   typedef uint64_t _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef uint64_t _srcVehicleId_type;
  _srcVehicleId_type srcVehicleId;

   typedef uint64_t _dstVehicleId_type;
  _dstVehicleId_type dstVehicleId;

   typedef  ::big_actor_msgs::Network_<ContainerAllocator>  _network_type;
  _network_type network;




  typedef boost::shared_ptr< ::big_actor_msgs::Connectivity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::big_actor_msgs::Connectivity_<ContainerAllocator> const> ConstPtr;

}; // struct Connectivity_

typedef ::big_actor_msgs::Connectivity_<std::allocator<void> > Connectivity;

typedef boost::shared_ptr< ::big_actor_msgs::Connectivity > ConnectivityPtr;
typedef boost::shared_ptr< ::big_actor_msgs::Connectivity const> ConnectivityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::big_actor_msgs::Connectivity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::big_actor_msgs::Connectivity_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace big_actor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'big_actor_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/big_actor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::big_actor_msgs::Connectivity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::big_actor_msgs::Connectivity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::big_actor_msgs::Connectivity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::big_actor_msgs::Connectivity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::big_actor_msgs::Connectivity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::big_actor_msgs::Connectivity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::big_actor_msgs::Connectivity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "336d33e3fadbc313014484c00766aaff";
  }

  static const char* value(const ::big_actor_msgs::Connectivity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x336d33e3fadbc313ULL;
  static const uint64_t static_value2 = 0x014484c00766aaffULL;
};

template<class ContainerAllocator>
struct DataType< ::big_actor_msgs::Connectivity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "big_actor_msgs/Connectivity";
  }

  static const char* value(const ::big_actor_msgs::Connectivity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::big_actor_msgs::Connectivity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
uint64 srcVehicleId           # First participating vehicle\n\
uint64 dstVehicleId           # Second participating vehicle\n\
Network network               # Network used for this connection\n\
\n\
================================================================================\n\
MSG: big_actor_msgs/Network\n\
uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
uint8 type                    # Network type (Physical Layer).\n\
	uint8 NT_NONE=0\n\
	uint8 NT_ETHERNET_10M=1\n\
	uint8 NT_ETHERNET_100M=2\n\
	uint8 NT_ETHERNET_1G=3\n\
	uint8 NT_ETHERNET_10G=4\n\
	uint8 NT_WIFI_2MB=10\n\
	uint8 NT_WIFI_11MB=11\n\
	uint8 NT_WIFI_27MB=12\n\
	uint8 NT_WIFI_54MB=13\n\
	uint8 NT_WIFI_600MB=14\n\
	uint8 NT_WIFI_1300MB=15\n\
	uint8 NT_WIFI_7000MB=16\n\
	uint8 NT_MESH_500kB=20\n\
	uint8 NT_ACOUSTIC_7kB=30\n\
	uint8 NT_ACOUSTIC_9kB=31\n\
	uint8 NT_ACOUSTIC_14kB=32\n\
	uint8 NT_ACOUSTIC_31kB=33\n\
    uint8 NT_PICCOLO=40\n\
    uint8 NT_AIS=50\n\
uint32 address                # TCP/IP network address, Piccolo channel number, ...\n\
uint32 mask                   # TCP/IP network mask or zero if not applicable\n\
";
  }

  static const char* value(const ::big_actor_msgs::Connectivity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::big_actor_msgs::Connectivity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeStamp);
      stream.next(m.srcVehicleId);
      stream.next(m.dstVehicleId);
      stream.next(m.network);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Connectivity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::big_actor_msgs::Connectivity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::big_actor_msgs::Connectivity_<ContainerAllocator>& v)
  {
    s << indent << "timeStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "srcVehicleId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.srcVehicleId);
    s << indent << "dstVehicleId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.dstVehicleId);
    s << indent << "network: ";
    s << std::endl;
    Printer< ::big_actor_msgs::Network_<ContainerAllocator> >::stream(s, indent + "  ", v.network);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIG_ACTOR_MSGS_MESSAGE_CONNECTIVITY_H

// Generated by gencpp from file big_actor_msgs/Hosting.msg
// DO NOT EDIT!


#ifndef BIG_ACTOR_MSGS_MESSAGE_HOSTING_H
#define BIG_ACTOR_MSGS_MESSAGE_HOSTING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace big_actor_msgs
{
template <class ContainerAllocator>
struct Hosting_
{
  typedef Hosting_<ContainerAllocator> Type;

  Hosting_()
    : timeStamp(0)
    , bigActorID()
    , vehicleName()  {
    }
  Hosting_(const ContainerAllocator& _alloc)
    : timeStamp(0)
    , bigActorID(_alloc)
    , vehicleName(_alloc)  {
    }



   typedef uint64_t _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bigActorID_type;
  _bigActorID_type bigActorID;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _vehicleName_type;
  _vehicleName_type vehicleName;




  typedef boost::shared_ptr< ::big_actor_msgs::Hosting_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::big_actor_msgs::Hosting_<ContainerAllocator> const> ConstPtr;

}; // struct Hosting_

typedef ::big_actor_msgs::Hosting_<std::allocator<void> > Hosting;

typedef boost::shared_ptr< ::big_actor_msgs::Hosting > HostingPtr;
typedef boost::shared_ptr< ::big_actor_msgs::Hosting const> HostingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::big_actor_msgs::Hosting_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::big_actor_msgs::Hosting_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace big_actor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'big_actor_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/big_actor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::big_actor_msgs::Hosting_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::big_actor_msgs::Hosting_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::big_actor_msgs::Hosting_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::big_actor_msgs::Hosting_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::big_actor_msgs::Hosting_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::big_actor_msgs::Hosting_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::big_actor_msgs::Hosting_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eaf3ee0e4ac6e55e2c3ccacf1f5acdd2";
  }

  static const char* value(const ::big_actor_msgs::Hosting_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeaf3ee0e4ac6e55eULL;
  static const uint64_t static_value2 = 0x2c3ccacf1f5acdd2ULL;
};

template<class ContainerAllocator>
struct DataType< ::big_actor_msgs::Hosting_<ContainerAllocator> >
{
  static const char* value()
  {
    return "big_actor_msgs/Hosting";
  }

  static const char* value(const ::big_actor_msgs::Hosting_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::big_actor_msgs::Hosting_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
string bigActorID	      # BigActor ID (Java UUID)\n\
string vehicleName 	      # name of the Vehicle hosting the bigActor\n\
";
  }

  static const char* value(const ::big_actor_msgs::Hosting_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::big_actor_msgs::Hosting_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeStamp);
      stream.next(m.bigActorID);
      stream.next(m.vehicleName);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Hosting_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::big_actor_msgs::Hosting_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::big_actor_msgs::Hosting_<ContainerAllocator>& v)
  {
    s << indent << "timeStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "bigActorID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bigActorID);
    s << indent << "vehicleName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.vehicleName);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIG_ACTOR_MSGS_MESSAGE_HOSTING_H

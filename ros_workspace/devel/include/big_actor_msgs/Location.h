// Generated by gencpp from file big_actor_msgs/Location.msg
// DO NOT EDIT!


#ifndef BIG_ACTOR_MSGS_MESSAGE_LOCATION_H
#define BIG_ACTOR_MSGS_MESSAGE_LOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <big_actor_msgs/LatLng.h>

namespace big_actor_msgs
{
template <class ContainerAllocator>
struct Location_
{
  typedef Location_<ContainerAllocator> Type;

  Location_()
    : timeStamp(0)
    , location_ttl(0)
    , locationId(0)
    , boundaries()
    , minimumAltitude(0.0)
    , maximumAltitude(0.0)
    , locationType(0)
    , name()  {
    }
  Location_(const ContainerAllocator& _alloc)
    : timeStamp(0)
    , location_ttl(0)
    , locationId(0)
    , boundaries(_alloc)
    , minimumAltitude(0.0)
    , maximumAltitude(0.0)
    , locationType(0)
    , name(_alloc)  {
    }



   typedef uint64_t _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef uint64_t _location_ttl_type;
  _location_ttl_type location_ttl;

   typedef uint32_t _locationId_type;
  _locationId_type locationId;

   typedef std::vector< ::big_actor_msgs::LatLng_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::big_actor_msgs::LatLng_<ContainerAllocator> >::other >  _boundaries_type;
  _boundaries_type boundaries;

   typedef float _minimumAltitude_type;
  _minimumAltitude_type minimumAltitude;

   typedef float _maximumAltitude_type;
  _maximumAltitude_type maximumAltitude;

   typedef uint8_t _locationType_type;
  _locationType_type locationType;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;


    enum { LT_NONE = 0u };
     enum { LT_SURFACE = 1u };
     enum { LT_AIR_SPACE = 2u };
     enum { LT_UNDERWATER = 3u };
     enum { LT_OIL_SPILL = 4u };
 

  typedef boost::shared_ptr< ::big_actor_msgs::Location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::big_actor_msgs::Location_<ContainerAllocator> const> ConstPtr;

}; // struct Location_

typedef ::big_actor_msgs::Location_<std::allocator<void> > Location;

typedef boost::shared_ptr< ::big_actor_msgs::Location > LocationPtr;
typedef boost::shared_ptr< ::big_actor_msgs::Location const> LocationConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::big_actor_msgs::Location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::big_actor_msgs::Location_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace big_actor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'big_actor_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/big_actor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::big_actor_msgs::Location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::big_actor_msgs::Location_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::big_actor_msgs::Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::big_actor_msgs::Location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::big_actor_msgs::Location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::big_actor_msgs::Location_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::big_actor_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d88979e34de91b403eaa11c3f6898922";
  }

  static const char* value(const ::big_actor_msgs::Location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd88979e34de91b40ULL;
  static const uint64_t static_value2 = 0x3eaa11c3f6898922ULL;
};

template<class ContainerAllocator>
struct DataType< ::big_actor_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "big_actor_msgs/Location";
  }

  static const char* value(const ::big_actor_msgs::Location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::big_actor_msgs::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
uint64 location_ttl           #	Time-to-live. If message is not updated, it is removed from sse\n\
uint32 locationId             # Unique location id\n\
LatLng[] boundaries           # Location vertices (polygon)\n\
float32 minimumAltitude       # Lower altitude bound of the location\n\
float32 maximumAltitude       # Upper altitude bound of the location\n\
uint8 locationType\n\
    uint8 LT_NONE=0\n\
    uint8 LT_SURFACE=1\n\
    uint8 LT_AIR_SPACE=2\n\
    uint8 LT_UNDERWATER=3\n\
    uint8 LT_OIL_SPILL=4\n\
string name                   # Location name\n\
\n\
================================================================================\n\
MSG: big_actor_msgs/LatLng\n\
float64 latitude\n\
float64 longitude\n\
";
  }

  static const char* value(const ::big_actor_msgs::Location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::big_actor_msgs::Location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeStamp);
      stream.next(m.location_ttl);
      stream.next(m.locationId);
      stream.next(m.boundaries);
      stream.next(m.minimumAltitude);
      stream.next(m.maximumAltitude);
      stream.next(m.locationType);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::big_actor_msgs::Location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::big_actor_msgs::Location_<ContainerAllocator>& v)
  {
    s << indent << "timeStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "location_ttl: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.location_ttl);
    s << indent << "locationId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.locationId);
    s << indent << "boundaries[]" << std::endl;
    for (size_t i = 0; i < v.boundaries.size(); ++i)
    {
      s << indent << "  boundaries[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::big_actor_msgs::LatLng_<ContainerAllocator> >::stream(s, indent + "    ", v.boundaries[i]);
    }
    s << indent << "minimumAltitude: ";
    Printer<float>::stream(s, indent + "  ", v.minimumAltitude);
    s << indent << "maximumAltitude: ";
    Printer<float>::stream(s, indent + "  ", v.maximumAltitude);
    s << indent << "locationType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.locationType);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIG_ACTOR_MSGS_MESSAGE_LOCATION_H

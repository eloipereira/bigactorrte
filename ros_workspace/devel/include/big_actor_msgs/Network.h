// Generated by gencpp from file big_actor_msgs/Network.msg
// DO NOT EDIT!


#ifndef BIG_ACTOR_MSGS_MESSAGE_NETWORK_H
#define BIG_ACTOR_MSGS_MESSAGE_NETWORK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace big_actor_msgs
{
template <class ContainerAllocator>
struct Network_
{
  typedef Network_<ContainerAllocator> Type;

  Network_()
    : timeStamp(0)
    , type(0)
    , address(0)
    , mask(0)  {
    }
  Network_(const ContainerAllocator& _alloc)
    : timeStamp(0)
    , type(0)
    , address(0)
    , mask(0)  {
    }



   typedef uint64_t _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint32_t _address_type;
  _address_type address;

   typedef uint32_t _mask_type;
  _mask_type mask;


    enum { NT_NONE = 0u };
     enum { NT_ETHERNET_10M = 1u };
     enum { NT_ETHERNET_100M = 2u };
     enum { NT_ETHERNET_1G = 3u };
     enum { NT_ETHERNET_10G = 4u };
     enum { NT_WIFI_2MB = 10u };
     enum { NT_WIFI_11MB = 11u };
     enum { NT_WIFI_27MB = 12u };
     enum { NT_WIFI_54MB = 13u };
     enum { NT_WIFI_600MB = 14u };
     enum { NT_WIFI_1300MB = 15u };
     enum { NT_WIFI_7000MB = 16u };
     enum { NT_MESH_500kB = 20u };
     enum { NT_ACOUSTIC_7kB = 30u };
     enum { NT_ACOUSTIC_9kB = 31u };
     enum { NT_ACOUSTIC_14kB = 32u };
     enum { NT_ACOUSTIC_31kB = 33u };
     enum { NT_PICCOLO = 40u };
     enum { NT_AIS = 50u };
 

  typedef boost::shared_ptr< ::big_actor_msgs::Network_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::big_actor_msgs::Network_<ContainerAllocator> const> ConstPtr;

}; // struct Network_

typedef ::big_actor_msgs::Network_<std::allocator<void> > Network;

typedef boost::shared_ptr< ::big_actor_msgs::Network > NetworkPtr;
typedef boost::shared_ptr< ::big_actor_msgs::Network const> NetworkConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::big_actor_msgs::Network_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::big_actor_msgs::Network_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace big_actor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'big_actor_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/big_actor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::big_actor_msgs::Network_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::big_actor_msgs::Network_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::big_actor_msgs::Network_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::big_actor_msgs::Network_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::big_actor_msgs::Network_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::big_actor_msgs::Network_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::big_actor_msgs::Network_<ContainerAllocator> >
{
  static const char* value()
  {
    return "554ce9273c98d8bffe7c601a04b41824";
  }

  static const char* value(const ::big_actor_msgs::Network_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x554ce9273c98d8bfULL;
  static const uint64_t static_value2 = 0xfe7c601a04b41824ULL;
};

template<class ContainerAllocator>
struct DataType< ::big_actor_msgs::Network_<ContainerAllocator> >
{
  static const char* value()
  {
    return "big_actor_msgs/Network";
  }

  static const char* value(const ::big_actor_msgs::Network_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::big_actor_msgs::Network_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
uint8 type                    # Network type (Physical Layer).\n\
	uint8 NT_NONE=0\n\
	uint8 NT_ETHERNET_10M=1\n\
	uint8 NT_ETHERNET_100M=2\n\
	uint8 NT_ETHERNET_1G=3\n\
	uint8 NT_ETHERNET_10G=4\n\
	uint8 NT_WIFI_2MB=10\n\
	uint8 NT_WIFI_11MB=11\n\
	uint8 NT_WIFI_27MB=12\n\
	uint8 NT_WIFI_54MB=13\n\
	uint8 NT_WIFI_600MB=14\n\
	uint8 NT_WIFI_1300MB=15\n\
	uint8 NT_WIFI_7000MB=16\n\
	uint8 NT_MESH_500kB=20\n\
	uint8 NT_ACOUSTIC_7kB=30\n\
	uint8 NT_ACOUSTIC_9kB=31\n\
	uint8 NT_ACOUSTIC_14kB=32\n\
	uint8 NT_ACOUSTIC_31kB=33\n\
    uint8 NT_PICCOLO=40\n\
    uint8 NT_AIS=50\n\
uint32 address                # TCP/IP network address, Piccolo channel number, ...\n\
uint32 mask                   # TCP/IP network mask or zero if not applicable\n\
";
  }

  static const char* value(const ::big_actor_msgs::Network_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::big_actor_msgs::Network_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeStamp);
      stream.next(m.type);
      stream.next(m.address);
      stream.next(m.mask);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Network_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::big_actor_msgs::Network_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::big_actor_msgs::Network_<ContainerAllocator>& v)
  {
    s << indent << "timeStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "address: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.address);
    s << indent << "mask: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.mask);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIG_ACTOR_MSGS_MESSAGE_NETWORK_H

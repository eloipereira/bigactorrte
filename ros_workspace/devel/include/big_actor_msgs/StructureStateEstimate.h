// Generated by gencpp from file big_actor_msgs/StructureStateEstimate.msg
// DO NOT EDIT!


#ifndef BIG_ACTOR_MSGS_MESSAGE_STRUCTURESTATEESTIMATE_H
#define BIG_ACTOR_MSGS_MESSAGE_STRUCTURESTATEESTIMATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <big_actor_msgs/Vehicle.h>
#include <big_actor_msgs/Connectivity.h>
#include <big_actor_msgs/Location.h>
#include <big_actor_msgs/Network.h>
#include <big_actor_msgs/Hosting.h>

namespace big_actor_msgs
{
template <class ContainerAllocator>
struct StructureStateEstimate_
{
  typedef StructureStateEstimate_<ContainerAllocator> Type;

  StructureStateEstimate_()
    : timeStamp(0)
    , srcVehicleId(0)
    , vehicles()
    , connections()
    , locations()
    , networks()
    , hostings()  {
    }
  StructureStateEstimate_(const ContainerAllocator& _alloc)
    : timeStamp(0)
    , srcVehicleId(0)
    , vehicles(_alloc)
    , connections(_alloc)
    , locations(_alloc)
    , networks(_alloc)
    , hostings(_alloc)  {
    }



   typedef uint64_t _timeStamp_type;
  _timeStamp_type timeStamp;

   typedef uint64_t _srcVehicleId_type;
  _srcVehicleId_type srcVehicleId;

   typedef std::vector< ::big_actor_msgs::Vehicle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::big_actor_msgs::Vehicle_<ContainerAllocator> >::other >  _vehicles_type;
  _vehicles_type vehicles;

   typedef std::vector< ::big_actor_msgs::Connectivity_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::big_actor_msgs::Connectivity_<ContainerAllocator> >::other >  _connections_type;
  _connections_type connections;

   typedef std::vector< ::big_actor_msgs::Location_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::big_actor_msgs::Location_<ContainerAllocator> >::other >  _locations_type;
  _locations_type locations;

   typedef std::vector< ::big_actor_msgs::Network_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::big_actor_msgs::Network_<ContainerAllocator> >::other >  _networks_type;
  _networks_type networks;

   typedef std::vector< ::big_actor_msgs::Hosting_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::big_actor_msgs::Hosting_<ContainerAllocator> >::other >  _hostings_type;
  _hostings_type hostings;




  typedef boost::shared_ptr< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> const> ConstPtr;

}; // struct StructureStateEstimate_

typedef ::big_actor_msgs::StructureStateEstimate_<std::allocator<void> > StructureStateEstimate;

typedef boost::shared_ptr< ::big_actor_msgs::StructureStateEstimate > StructureStateEstimatePtr;
typedef boost::shared_ptr< ::big_actor_msgs::StructureStateEstimate const> StructureStateEstimateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace big_actor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'big_actor_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/big_actor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3efbe42b53bff423519ce6c0d4dc7fc";
  }

  static const char* value(const ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3efbe42b53bff42ULL;
  static const uint64_t static_value2 = 0x3519ce6c0d4dc7fcULL;
};

template<class ContainerAllocator>
struct DataType< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "big_actor_msgs/StructureStateEstimate";
  }

  static const char* value(const ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
uint64 srcVehicleId           # Vehicle id of the sending vehicle\n\
Vehicle[] vehicles            # Known vehicles\n\
Connectivity[] connections    # Established connections between vehicles\n\
Location[] locations          # Known locations\n\
Network[] networks            # Known networks\n\
Hosting[] hostings	      # Hosting relation \n\
================================================================================\n\
MSG: big_actor_msgs/Vehicle\n\
uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
uint64 vehicle_ttl            # Time-to-live. If message is not updated, it is removed from sse\n\
uint64 vehicleId              # Unique vehicle id\n\
LatLngAlt position            # Vehicle position\n\
float32 heading               # Vehicle heading\n\
uint32 taskId                 # Currently processed task\n\
uint8 taskState               # see Task.status\n\
uint8 vehicleState            # Status of the vehicle\n\
    uint8 VS_NONE=0\n\
    uint8 VS_IDLE=1           # Vehicle idles\n\
    uint8 VS_BUSY=2           # Vehicle is working at task specified in taskId\n\
uint8 vehicleType\n\
    uint8 VT_NONE=0\n\
    uint8 VT_QUADROTOR=1\n\
    uint8 VT_VESSEL=2 \n\
    uint8 VT_DRIFTER=3\n\
    uint8 VT_MODEL_AIRPLANE=4\n\
    uint8 VT_GROUND_STATION=5\n\
string name                   # Vehicle name\n\
Network[] networks            # Networks known to the vehicle.\n\
\n\
================================================================================\n\
MSG: big_actor_msgs/LatLngAlt\n\
float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
================================================================================\n\
MSG: big_actor_msgs/Network\n\
uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
uint8 type                    # Network type (Physical Layer).\n\
	uint8 NT_NONE=0\n\
	uint8 NT_ETHERNET_10M=1\n\
	uint8 NT_ETHERNET_100M=2\n\
	uint8 NT_ETHERNET_1G=3\n\
	uint8 NT_ETHERNET_10G=4\n\
	uint8 NT_WIFI_2MB=10\n\
	uint8 NT_WIFI_11MB=11\n\
	uint8 NT_WIFI_27MB=12\n\
	uint8 NT_WIFI_54MB=13\n\
	uint8 NT_WIFI_600MB=14\n\
	uint8 NT_WIFI_1300MB=15\n\
	uint8 NT_WIFI_7000MB=16\n\
	uint8 NT_MESH_500kB=20\n\
	uint8 NT_ACOUSTIC_7kB=30\n\
	uint8 NT_ACOUSTIC_9kB=31\n\
	uint8 NT_ACOUSTIC_14kB=32\n\
	uint8 NT_ACOUSTIC_31kB=33\n\
    uint8 NT_PICCOLO=40\n\
    uint8 NT_AIS=50\n\
uint32 address                # TCP/IP network address, Piccolo channel number, ...\n\
uint32 mask                   # TCP/IP network mask or zero if not applicable\n\
================================================================================\n\
MSG: big_actor_msgs/Connectivity\n\
uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
uint64 srcVehicleId           # First participating vehicle\n\
uint64 dstVehicleId           # Second participating vehicle\n\
Network network               # Network used for this connection\n\
\n\
================================================================================\n\
MSG: big_actor_msgs/Location\n\
uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
uint64 location_ttl           #	Time-to-live. If message is not updated, it is removed from sse\n\
uint32 locationId             # Unique location id\n\
LatLng[] boundaries           # Location vertices (polygon)\n\
float32 minimumAltitude       # Lower altitude bound of the location\n\
float32 maximumAltitude       # Upper altitude bound of the location\n\
uint8 locationType\n\
    uint8 LT_NONE=0\n\
    uint8 LT_SURFACE=1\n\
    uint8 LT_AIR_SPACE=2\n\
    uint8 LT_UNDERWATER=3\n\
    uint8 LT_OIL_SPILL=4\n\
string name                   # Location name\n\
\n\
================================================================================\n\
MSG: big_actor_msgs/LatLng\n\
float64 latitude\n\
float64 longitude\n\
================================================================================\n\
MSG: big_actor_msgs/Hosting\n\
uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
string bigActorID	      # BigActor ID (Java UUID)\n\
string vehicleName 	      # name of the Vehicle hosting the bigActor\n\
";
  }

  static const char* value(const ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeStamp);
      stream.next(m.srcVehicleId);
      stream.next(m.vehicles);
      stream.next(m.connections);
      stream.next(m.locations);
      stream.next(m.networks);
      stream.next(m.hostings);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct StructureStateEstimate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::big_actor_msgs::StructureStateEstimate_<ContainerAllocator>& v)
  {
    s << indent << "timeStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timeStamp);
    s << indent << "srcVehicleId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.srcVehicleId);
    s << indent << "vehicles[]" << std::endl;
    for (size_t i = 0; i < v.vehicles.size(); ++i)
    {
      s << indent << "  vehicles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::big_actor_msgs::Vehicle_<ContainerAllocator> >::stream(s, indent + "    ", v.vehicles[i]);
    }
    s << indent << "connections[]" << std::endl;
    for (size_t i = 0; i < v.connections.size(); ++i)
    {
      s << indent << "  connections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::big_actor_msgs::Connectivity_<ContainerAllocator> >::stream(s, indent + "    ", v.connections[i]);
    }
    s << indent << "locations[]" << std::endl;
    for (size_t i = 0; i < v.locations.size(); ++i)
    {
      s << indent << "  locations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::big_actor_msgs::Location_<ContainerAllocator> >::stream(s, indent + "    ", v.locations[i]);
    }
    s << indent << "networks[]" << std::endl;
    for (size_t i = 0; i < v.networks.size(); ++i)
    {
      s << indent << "  networks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::big_actor_msgs::Network_<ContainerAllocator> >::stream(s, indent + "    ", v.networks[i]);
    }
    s << indent << "hostings[]" << std::endl;
    for (size_t i = 0; i < v.hostings.size(); ++i)
    {
      s << indent << "  hostings[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::big_actor_msgs::Hosting_<ContainerAllocator> >::stream(s, indent + "    ", v.hostings[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIG_ACTOR_MSGS_MESSAGE_STRUCTURESTATEESTIMATE_H

// Generated by gencpp from file big_actor_msgs/Task.msg
// DO NOT EDIT!


#ifndef BIG_ACTOR_MSGS_MESSAGE_TASK_H
#define BIG_ACTOR_MSGS_MESSAGE_TASK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace big_actor_msgs
{
template <class ContainerAllocator>
struct Task_
{
  typedef Task_<ContainerAllocator> Type;

  Task_()
    : taskStamp(0)
    , taskId(0)
    , taskType(0)
    , status(0)
    , vehicleId(0)
    , creationStamp(0)
    , parameters()  {
    }
  Task_(const ContainerAllocator& _alloc)
    : taskStamp(0)
    , taskId(0)
    , taskType(0)
    , status(0)
    , vehicleId(0)
    , creationStamp(0)
    , parameters(_alloc)  {
    }



   typedef uint64_t _taskStamp_type;
  _taskStamp_type taskStamp;

   typedef uint32_t _taskId_type;
  _taskId_type taskId;

   typedef uint32_t _taskType_type;
  _taskType_type taskType;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint64_t _vehicleId_type;
  _vehicleId_type vehicleId;

   typedef uint64_t _creationStamp_type;
  _creationStamp_type creationStamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parameters_type;
  _parameters_type parameters;


    enum { TT_NONE = 0u };
     enum { TT_SEARCH = 1u };
     enum { TT_GOTO_WP = 2u };
     enum { TT_TRACK = 3u };
     enum { TT_GOTO_LOCATION = 4u };
     enum { TT_RETURN_HOME = 5u };
     enum { TT_HOLD = 6u };
     enum { TT_VIDEOSTREAM = 7u };
     enum { TS_NONE = 0u };
     enum { TS_TODO = 1u };
     enum { TS_IN_PROGRESS = 2u };
     enum { TS_DONE = 3u };
     enum { TS_ASSIGNED = 4u };
     enum { TS_CANCELED = 5u };
 

  typedef boost::shared_ptr< ::big_actor_msgs::Task_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::big_actor_msgs::Task_<ContainerAllocator> const> ConstPtr;

}; // struct Task_

typedef ::big_actor_msgs::Task_<std::allocator<void> > Task;

typedef boost::shared_ptr< ::big_actor_msgs::Task > TaskPtr;
typedef boost::shared_ptr< ::big_actor_msgs::Task const> TaskConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::big_actor_msgs::Task_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::big_actor_msgs::Task_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace big_actor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'big_actor_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/big_actor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::big_actor_msgs::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::big_actor_msgs::Task_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::big_actor_msgs::Task_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::big_actor_msgs::Task_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::big_actor_msgs::Task_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::big_actor_msgs::Task_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::big_actor_msgs::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "148edaf166469545aee51675136822bd";
  }

  static const char* value(const ::big_actor_msgs::Task_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x148edaf166469545ULL;
  static const uint64_t static_value2 = 0xaee51675136822bdULL;
};

template<class ContainerAllocator>
struct DataType< ::big_actor_msgs::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "big_actor_msgs/Task";
  }

  static const char* value(const ::big_actor_msgs::Task_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::big_actor_msgs::Task_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 taskStamp                # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
uint32 taskId                   # Unique task id\n\
uint32 taskType                 # Type of the Task (Search, GotoWP, Track, GotoLocation )\n\
    uint8 TT_NONE=0\n\
    uint8 TT_SEARCH=1\n\
    uint8 TT_GOTO_WP=2\n\
    uint8 TT_TRACK=3\n\
    uint8 TT_GOTO_LOCATION=4\n\
    uint8 TT_RETURN_HOME=5\n\
    uint8 TT_HOLD=6				# (wait in loiter)\n\
    uint8 TT_VIDEOSTREAM=7\n\
uint8 status                    # Status of the task\n\
    uint8 TS_NONE=0\n\
    uint8 TS_TODO=1             # Created and Not Assigned \n\
    uint8 TS_IN_PROGRESS=2      # Assigned and ack by vehicle  \n\
    uint8 TS_DONE=3             # Done :)\n\
    uint8 TS_ASSIGNED=4         # Assigned by task publisher not ack'd by vehicle  \n\
    uint8 TS_CANCELED=5         # Canceled by task publisher\n\
uint64 vehicleId                # Assigned or/and ack by vehicle  \n\
uint64 creationStamp            # If later we adopt a dynamic task creation (in milliseconds since the Epoch).\n\
string parameters               # JSON parameters related with task type\n\
";
  }

  static const char* value(const ::big_actor_msgs::Task_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::big_actor_msgs::Task_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.taskStamp);
      stream.next(m.taskId);
      stream.next(m.taskType);
      stream.next(m.status);
      stream.next(m.vehicleId);
      stream.next(m.creationStamp);
      stream.next(m.parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Task_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::big_actor_msgs::Task_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::big_actor_msgs::Task_<ContainerAllocator>& v)
  {
    s << indent << "taskStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.taskStamp);
    s << indent << "taskId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.taskId);
    s << indent << "taskType: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.taskType);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "vehicleId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.vehicleId);
    s << indent << "creationStamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.creationStamp);
    s << indent << "parameters: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameters);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BIG_ACTOR_MSGS_MESSAGE_TASK_H

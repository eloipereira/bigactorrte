// Generated by gencpp from file piccolo_ros/PiccoloTelemetry.msg
// DO NOT EDIT!


#ifndef PICCOLO_ROS_MESSAGE_PICCOLOTELEMETRY_H
#define PICCOLO_ROS_MESSAGE_PICCOLOTELEMETRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace piccolo_ros
{
template <class ContainerAllocator>
struct PiccoloTelemetry_
{
  typedef PiccoloTelemetry_<ContainerAllocator> Type;

  PiccoloTelemetry_()
    : header()
    , vehicleid(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , ias(0)
    , vx(0)
    , vy(0)
    , vz(0)
    , roll(0)
    , pitch(0)
    , yaw(0.0)
    , barometricAltitude(0)
    , windSouth(0)
    , windWest(0)
    , leftRPM(0)
    , rightRPM(0)
    , staticPressure(0)
    , accelX(0)
    , accelY(0)
    , accelZ(0)
    , compass(0)
    , agl(0)  {
    }
  PiccoloTelemetry_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicleid(0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , ias(0)
    , vx(0)
    , vy(0)
    , vz(0)
    , roll(0)
    , pitch(0)
    , yaw(0.0)
    , barometricAltitude(0)
    , windSouth(0)
    , windWest(0)
    , leftRPM(0)
    , rightRPM(0)
    , staticPressure(0)
    , accelX(0)
    , accelY(0)
    , accelZ(0)
    , compass(0)
    , agl(0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _vehicleid_type;
  _vehicleid_type vehicleid;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_type;
  _altitude_type altitude;

   typedef uint16_t _ias_type;
  _ias_type ias;

   typedef int16_t _vx_type;
  _vx_type vx;

   typedef int16_t _vy_type;
  _vy_type vy;

   typedef int16_t _vz_type;
  _vz_type vz;

   typedef int16_t _roll_type;
  _roll_type roll;

   typedef int16_t _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef int16_t _barometricAltitude_type;
  _barometricAltitude_type barometricAltitude;

   typedef int16_t _windSouth_type;
  _windSouth_type windSouth;

   typedef int16_t _windWest_type;
  _windWest_type windWest;

   typedef uint16_t _leftRPM_type;
  _leftRPM_type leftRPM;

   typedef uint16_t _rightRPM_type;
  _rightRPM_type rightRPM;

   typedef uint16_t _staticPressure_type;
  _staticPressure_type staticPressure;

   typedef int16_t _accelX_type;
  _accelX_type accelX;

   typedef int16_t _accelY_type;
  _accelY_type accelY;

   typedef int16_t _accelZ_type;
  _accelZ_type accelZ;

   typedef uint16_t _compass_type;
  _compass_type compass;

   typedef uint16_t _agl_type;
  _agl_type agl;




  typedef boost::shared_ptr< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> const> ConstPtr;

}; // struct PiccoloTelemetry_

typedef ::piccolo_ros::PiccoloTelemetry_<std::allocator<void> > PiccoloTelemetry;

typedef boost::shared_ptr< ::piccolo_ros::PiccoloTelemetry > PiccoloTelemetryPtr;
typedef boost::shared_ptr< ::piccolo_ros::PiccoloTelemetry const> PiccoloTelemetryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace piccolo_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'piccolo_ros': ['/home/eloi/bigactorrte/ros_workspace/src/piccolo_ros/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f858aa171f333369271fd878689b8042";
  }

  static const char* value(const ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf858aa171f333369ULL;
  static const uint64_t static_value2 = 0x271fd878689b8042ULL;
};

template<class ContainerAllocator>
struct DataType< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piccolo_ros/PiccoloTelemetry";
  }

  static const char* value(const ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint16 vehicleid\n\
float32 latitude\n\
float32 longitude\n\
float32 altitude\n\
uint16 ias\n\
int16 vx\n\
int16 vy\n\
int16 vz\n\
int16 roll\n\
int16 pitch\n\
float32 yaw\n\
int16 barometricAltitude\n\
int16 windSouth\n\
int16 windWest\n\
uint16 leftRPM\n\
uint16 rightRPM\n\
uint16 staticPressure\n\
int16 accelX\n\
int16 accelY\n\
int16 accelZ\n\
uint16 compass\n\
uint16 agl\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicleid);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.ias);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.barometricAltitude);
      stream.next(m.windSouth);
      stream.next(m.windWest);
      stream.next(m.leftRPM);
      stream.next(m.rightRPM);
      stream.next(m.staticPressure);
      stream.next(m.accelX);
      stream.next(m.accelY);
      stream.next(m.accelZ);
      stream.next(m.compass);
      stream.next(m.agl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct PiccoloTelemetry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piccolo_ros::PiccoloTelemetry_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vehicleid: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vehicleid);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
    s << indent << "ias: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ias);
    s << indent << "vx: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<int16_t>::stream(s, indent + "  ", v.vz);
    s << indent << "roll: ";
    Printer<int16_t>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "barometricAltitude: ";
    Printer<int16_t>::stream(s, indent + "  ", v.barometricAltitude);
    s << indent << "windSouth: ";
    Printer<int16_t>::stream(s, indent + "  ", v.windSouth);
    s << indent << "windWest: ";
    Printer<int16_t>::stream(s, indent + "  ", v.windWest);
    s << indent << "leftRPM: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.leftRPM);
    s << indent << "rightRPM: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rightRPM);
    s << indent << "staticPressure: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.staticPressure);
    s << indent << "accelX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accelX);
    s << indent << "accelY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accelY);
    s << indent << "accelZ: ";
    Printer<int16_t>::stream(s, indent + "  ", v.accelZ);
    s << indent << "compass: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.compass);
    s << indent << "agl: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.agl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PICCOLO_ROS_MESSAGE_PICCOLOTELEMETRY_H

// Generated by gencpp from file piccolo_ros/PiccoloToPayload.msg
// DO NOT EDIT!


#ifndef PICCOLO_ROS_MESSAGE_PICCOLOTOPAYLOAD_H
#define PICCOLO_ROS_MESSAGE_PICCOLOTOPAYLOAD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace piccolo_ros
{
template <class ContainerAllocator>
struct PiccoloToPayload_
{
  typedef PiccoloToPayload_<ContainerAllocator> Type;

  PiccoloToPayload_()
    : vehicleid(0)
    , len(0)
    , data()  {
    }
  PiccoloToPayload_(const ContainerAllocator& _alloc)
    : vehicleid(0)
    , len(0)
    , data(_alloc)  {
    }



   typedef uint16_t _vehicleid_type;
  _vehicleid_type vehicleid;

   typedef int8_t _len_type;
  _len_type len;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> const> ConstPtr;

}; // struct PiccoloToPayload_

typedef ::piccolo_ros::PiccoloToPayload_<std::allocator<void> > PiccoloToPayload;

typedef boost::shared_ptr< ::piccolo_ros::PiccoloToPayload > PiccoloToPayloadPtr;
typedef boost::shared_ptr< ::piccolo_ros::PiccoloToPayload const> PiccoloToPayloadConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace piccolo_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'piccolo_ros': ['/home/eloi/bigactorrte/ros_workspace/src/piccolo_ros/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5582c63616d9b2ddbe426b48a82c81be";
  }

  static const char* value(const ::piccolo_ros::PiccoloToPayload_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5582c63616d9b2ddULL;
  static const uint64_t static_value2 = 0xbe426b48a82c81beULL;
};

template<class ContainerAllocator>
struct DataType< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> >
{
  static const char* value()
  {
    return "piccolo_ros/PiccoloToPayload";
  }

  static const char* value(const ::piccolo_ros::PiccoloToPayload_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 vehicleid\n\
int8 len\n\
int8[]  data\n\
";
  }

  static const char* value(const ::piccolo_ros::PiccoloToPayload_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vehicleid);
      stream.next(m.len);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct PiccoloToPayload_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::piccolo_ros::PiccoloToPayload_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::piccolo_ros::PiccoloToPayload_<ContainerAllocator>& v)
  {
    s << indent << "vehicleid: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vehicleid);
    s << indent << "len: ";
    Printer<int8_t>::stream(s, indent + "  ", v.len);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PICCOLO_ROS_MESSAGE_PICCOLOTOPAYLOAD_H

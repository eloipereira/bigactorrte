// Generated by gencpp from file ros_vehicle_msgs/GatewayData.msg
// DO NOT EDIT!


#ifndef ROS_VEHICLE_MSGS_MESSAGE_GATEWAYDATA_H
#define ROS_VEHICLE_MSGS_MESSAGE_GATEWAYDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_vehicle_msgs
{
template <class ContainerAllocator>
struct GatewayData_
{
  typedef GatewayData_<ContainerAllocator> Type;

  GatewayData_()
    : src_id(0)
    , msg_type(0)
    , serialized()  {
    }
  GatewayData_(const ContainerAllocator& _alloc)
    : src_id(0)
    , msg_type(0)
    , serialized(_alloc)  {
    }



   typedef uint32_t _src_id_type;
  _src_id_type src_id;

   typedef uint8_t _msg_type_type;
  _msg_type_type msg_type;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _serialized_type;
  _serialized_type serialized;


    enum { GD_MSE = 0u };
     enum { GD_SSE = 1u };
 

  typedef boost::shared_ptr< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> const> ConstPtr;

}; // struct GatewayData_

typedef ::ros_vehicle_msgs::GatewayData_<std::allocator<void> > GatewayData;

typedef boost::shared_ptr< ::ros_vehicle_msgs::GatewayData > GatewayDataPtr;
typedef boost::shared_ptr< ::ros_vehicle_msgs::GatewayData const> GatewayDataConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ros_vehicle_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/ros_vehicle_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'big_actor_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/big_actor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35816ea244f328d6667604276bbb7666";
  }

  static const char* value(const ::ros_vehicle_msgs::GatewayData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35816ea244f328d6ULL;
  static const uint64_t static_value2 = 0x667604276bbb7666ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_vehicle_msgs/GatewayData";
  }

  static const char* value(const ::ros_vehicle_msgs::GatewayData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 src_id\n\
uint8 msg_type\n\
    uint8 GD_MSE=0\n\
    uint8 GD_SSE=1\n\
uint8[] serialized     \n\
";
  }

  static const char* value(const ::ros_vehicle_msgs::GatewayData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.src_id);
      stream.next(m.msg_type);
      stream.next(m.serialized);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GatewayData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_vehicle_msgs::GatewayData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_vehicle_msgs::GatewayData_<ContainerAllocator>& v)
  {
    s << indent << "src_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.src_id);
    s << indent << "msg_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.msg_type);
    s << indent << "serialized[]" << std::endl;
    for (size_t i = 0; i < v.serialized.size(); ++i)
    {
      s << indent << "  serialized[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.serialized[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_VEHICLE_MSGS_MESSAGE_GATEWAYDATA_H

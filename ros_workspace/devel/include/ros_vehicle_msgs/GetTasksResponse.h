// Generated by gencpp from file ros_vehicle_msgs/GetTasksResponse.msg
// DO NOT EDIT!


#ifndef ROS_VEHICLE_MSGS_MESSAGE_GETTASKSRESPONSE_H
#define ROS_VEHICLE_MSGS_MESSAGE_GETTASKSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <big_actor_msgs/Task.h>

namespace ros_vehicle_msgs
{
template <class ContainerAllocator>
struct GetTasksResponse_
{
  typedef GetTasksResponse_<ContainerAllocator> Type;

  GetTasksResponse_()
    : tasks()  {
    }
  GetTasksResponse_(const ContainerAllocator& _alloc)
    : tasks(_alloc)  {
    }



   typedef std::vector< ::big_actor_msgs::Task_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::big_actor_msgs::Task_<ContainerAllocator> >::other >  _tasks_type;
  _tasks_type tasks;




  typedef boost::shared_ptr< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetTasksResponse_

typedef ::ros_vehicle_msgs::GetTasksResponse_<std::allocator<void> > GetTasksResponse;

typedef boost::shared_ptr< ::ros_vehicle_msgs::GetTasksResponse > GetTasksResponsePtr;
typedef boost::shared_ptr< ::ros_vehicle_msgs::GetTasksResponse const> GetTasksResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ros_vehicle_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/ros_vehicle_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'big_actor_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/big_actor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96de1f9d666f3aee662a92ef16988af0";
  }

  static const char* value(const ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96de1f9d666f3aeeULL;
  static const uint64_t static_value2 = 0x662a92ef16988af0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_vehicle_msgs/GetTasksResponse";
  }

  static const char* value(const ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "big_actor_msgs/Task[] tasks\n\
\n\
================================================================================\n\
MSG: big_actor_msgs/Task\n\
uint64 taskStamp                # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).\n\
uint32 taskId                   # Unique task id\n\
uint32 taskType                 # Type of the Task (Search, GotoWP, Track, GotoLocation )\n\
    uint8 TT_NONE=0\n\
    uint8 TT_SEARCH=1\n\
    uint8 TT_GOTO_WP=2\n\
    uint8 TT_TRACK=3\n\
    uint8 TT_GOTO_LOCATION=4\n\
    uint8 TT_RETURN_HOME=5\n\
    uint8 TT_HOLD=6				# (wait in loiter)\n\
    uint8 TT_VIDEOSTREAM=7\n\
uint8 status                    # Status of the task\n\
    uint8 TS_NONE=0\n\
    uint8 TS_TODO=1             # Created and Not Assigned \n\
    uint8 TS_IN_PROGRESS=2      # Assigned and ack by vehicle  \n\
    uint8 TS_DONE=3             # Done :)\n\
    uint8 TS_ASSIGNED=4         # Assigned by task publisher not ack'd by vehicle  \n\
    uint8 TS_CANCELED=5         # Canceled by task publisher\n\
uint64 vehicleId                # Assigned or/and ack by vehicle  \n\
uint64 creationStamp            # If later we adopt a dynamic task creation (in milliseconds since the Epoch).\n\
string parameters               # JSON parameters related with task type\n\
";
  }

  static const char* value(const ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tasks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GetTasksResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_vehicle_msgs::GetTasksResponse_<ContainerAllocator>& v)
  {
    s << indent << "tasks[]" << std::endl;
    for (size_t i = 0; i < v.tasks.size(); ++i)
    {
      s << indent << "  tasks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::big_actor_msgs::Task_<ContainerAllocator> >::stream(s, indent + "    ", v.tasks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_VEHICLE_MSGS_MESSAGE_GETTASKSRESPONSE_H

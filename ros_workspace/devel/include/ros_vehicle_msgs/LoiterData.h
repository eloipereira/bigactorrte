// Generated by gencpp from file ros_vehicle_msgs/LoiterData.msg
// DO NOT EDIT!


#ifndef ROS_VEHICLE_MSGS_MESSAGE_LOITERDATA_H
#define ROS_VEHICLE_MSGS_MESSAGE_LOITERDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_vehicle_msgs
{
template <class ContainerAllocator>
struct LoiterData_
{
  typedef LoiterData_<ContainerAllocator> Type;

  LoiterData_()
    : active(false)
    , radius(0)
    , time_sec(0)
    , times(0)
    , clockwise(false)  {
    }
  LoiterData_(const ContainerAllocator& _alloc)
    : active(false)
    , radius(0)
    , time_sec(0)
    , times(0)
    , clockwise(false)  {
    }



   typedef uint8_t _active_type;
  _active_type active;

   typedef uint16_t _radius_type;
  _radius_type radius;

   typedef uint16_t _time_sec_type;
  _time_sec_type time_sec;

   typedef uint16_t _times_type;
  _times_type times;

   typedef uint8_t _clockwise_type;
  _clockwise_type clockwise;




  typedef boost::shared_ptr< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> const> ConstPtr;

}; // struct LoiterData_

typedef ::ros_vehicle_msgs::LoiterData_<std::allocator<void> > LoiterData;

typedef boost::shared_ptr< ::ros_vehicle_msgs::LoiterData > LoiterDataPtr;
typedef boost::shared_ptr< ::ros_vehicle_msgs::LoiterData const> LoiterDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ros_vehicle_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/ros_vehicle_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'big_actor_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/big_actor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf7af9921d5d304c4f893059282c81fb";
  }

  static const char* value(const ::ros_vehicle_msgs::LoiterData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf7af9921d5d304cULL;
  static const uint64_t static_value2 = 0x4f893059282c81fbULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_vehicle_msgs/LoiterData";
  }

  static const char* value(const ::ros_vehicle_msgs::LoiterData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool active             #have loiter definition \n\
uint16 radius           #radius of loiter in metters  \n\
uint16 time_sec         #time in seconds to be in loiter\n\
uint16 times            #number of loiters to do \n\
bool clockwise          #go clockwise direction    \n\
";
  }

  static const char* value(const ::ros_vehicle_msgs::LoiterData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.active);
      stream.next(m.radius);
      stream.next(m.time_sec);
      stream.next(m.times);
      stream.next(m.clockwise);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct LoiterData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_vehicle_msgs::LoiterData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_vehicle_msgs::LoiterData_<ContainerAllocator>& v)
  {
    s << indent << "active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active);
    s << indent << "radius: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.radius);
    s << indent << "time_sec: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time_sec);
    s << indent << "times: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.times);
    s << indent << "clockwise: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clockwise);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_VEHICLE_MSGS_MESSAGE_LOITERDATA_H

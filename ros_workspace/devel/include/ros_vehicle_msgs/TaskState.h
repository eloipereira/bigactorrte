// Generated by gencpp from file ros_vehicle_msgs/TaskState.msg
// DO NOT EDIT!


#ifndef ROS_VEHICLE_MSGS_MESSAGE_TASKSTATE_H
#define ROS_VEHICLE_MSGS_MESSAGE_TASKSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_vehicle_msgs
{
template <class ContainerAllocator>
struct TaskState_
{
  typedef TaskState_<ContainerAllocator> Type;

  TaskState_()
    : vehicleId(0)
    , vehicleStatus(0)
    , stamp(0)
    , taskId(0)
    , taskStatus(0)  {
    }
  TaskState_(const ContainerAllocator& _alloc)
    : vehicleId(0)
    , vehicleStatus(0)
    , stamp(0)
    , taskId(0)
    , taskStatus(0)  {
    }



   typedef uint64_t _vehicleId_type;
  _vehicleId_type vehicleId;

   typedef uint8_t _vehicleStatus_type;
  _vehicleStatus_type vehicleStatus;

   typedef uint64_t _stamp_type;
  _stamp_type stamp;

   typedef uint32_t _taskId_type;
  _taskId_type taskId;

   typedef uint8_t _taskStatus_type;
  _taskStatus_type taskStatus;




  typedef boost::shared_ptr< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> const> ConstPtr;

}; // struct TaskState_

typedef ::ros_vehicle_msgs::TaskState_<std::allocator<void> > TaskState;

typedef boost::shared_ptr< ::ros_vehicle_msgs::TaskState > TaskStatePtr;
typedef boost::shared_ptr< ::ros_vehicle_msgs::TaskState const> TaskStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_vehicle_msgs::TaskState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ros_vehicle_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/ros_vehicle_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'big_actor_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/big_actor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d771a872078af9c03344db2decc0965";
  }

  static const char* value(const ::ros_vehicle_msgs::TaskState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d771a872078af9cULL;
  static const uint64_t static_value2 = 0x03344db2decc0965ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_vehicle_msgs/TaskState";
  }

  static const char* value(const ::ros_vehicle_msgs::TaskState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64  vehicleId\n\
uint8   vehicleStatus\n\
uint64  stamp\n\
uint32  taskId\n\
uint8   taskStatus\n\
";
  }

  static const char* value(const ::ros_vehicle_msgs::TaskState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vehicleId);
      stream.next(m.vehicleStatus);
      stream.next(m.stamp);
      stream.next(m.taskId);
      stream.next(m.taskStatus);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct TaskState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_vehicle_msgs::TaskState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_vehicle_msgs::TaskState_<ContainerAllocator>& v)
  {
    s << indent << "vehicleId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.vehicleId);
    s << indent << "vehicleStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicleStatus);
    s << indent << "stamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.stamp);
    s << indent << "taskId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.taskId);
    s << indent << "taskStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.taskStatus);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_VEHICLE_MSGS_MESSAGE_TASKSTATE_H

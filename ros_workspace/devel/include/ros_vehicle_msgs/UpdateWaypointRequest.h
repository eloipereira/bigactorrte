// Generated by gencpp from file ros_vehicle_msgs/UpdateWaypointRequest.msg
// DO NOT EDIT!


#ifndef ROS_VEHICLE_MSGS_MESSAGE_UPDATEWAYPOINTREQUEST_H
#define ROS_VEHICLE_MSGS_MESSAGE_UPDATEWAYPOINTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ros_vehicle_msgs/Waypoint.h>

namespace ros_vehicle_msgs
{
template <class ContainerAllocator>
struct UpdateWaypointRequest_
{
  typedef UpdateWaypointRequest_<ContainerAllocator> Type;

  UpdateWaypointRequest_()
    : wp()  {
    }
  UpdateWaypointRequest_(const ContainerAllocator& _alloc)
    : wp(_alloc)  {
    }



   typedef  ::ros_vehicle_msgs::Waypoint_<ContainerAllocator>  _wp_type;
  _wp_type wp;




  typedef boost::shared_ptr< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UpdateWaypointRequest_

typedef ::ros_vehicle_msgs::UpdateWaypointRequest_<std::allocator<void> > UpdateWaypointRequest;

typedef boost::shared_ptr< ::ros_vehicle_msgs::UpdateWaypointRequest > UpdateWaypointRequestPtr;
typedef boost::shared_ptr< ::ros_vehicle_msgs::UpdateWaypointRequest const> UpdateWaypointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ros_vehicle_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/ros_vehicle_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'big_actor_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/big_actor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0efa08778c010fd9d9a0762adb224fc";
  }

  static const char* value(const ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0efa08778c010fdULL;
  static const uint64_t static_value2 = 0x9d9a0762adb224fcULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_vehicle_msgs/UpdateWaypointRequest";
  }

  static const char* value(const ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Waypoint wp\n\
\n\
================================================================================\n\
MSG: ros_vehicle_msgs/Waypoint\n\
Header                      header\n\
uint16                      waypointId\n\
uint16                      nextWp\n\
uint16                      previousWp\n\
bool                        start\n\
bool                        stop\n\
bool                        home\n\
big_actor_msgs/LatLngAlt    position\n\
LoiterData                  loiter\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: big_actor_msgs/LatLngAlt\n\
float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
================================================================================\n\
MSG: ros_vehicle_msgs/LoiterData\n\
bool active             #have loiter definition \n\
uint16 radius           #radius of loiter in metters  \n\
uint16 time_sec         #time in seconds to be in loiter\n\
uint16 times            #number of loiters to do \n\
bool clockwise          #go clockwise direction    \n\
";
  }

  static const char* value(const ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct UpdateWaypointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_vehicle_msgs::UpdateWaypointRequest_<ContainerAllocator>& v)
  {
    s << indent << "wp: ";
    s << std::endl;
    Printer< ::ros_vehicle_msgs::Waypoint_<ContainerAllocator> >::stream(s, indent + "  ", v.wp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_VEHICLE_MSGS_MESSAGE_UPDATEWAYPOINTREQUEST_H

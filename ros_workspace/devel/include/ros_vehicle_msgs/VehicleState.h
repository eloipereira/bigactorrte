// Generated by gencpp from file ros_vehicle_msgs/VehicleState.msg
// DO NOT EDIT!


#ifndef ROS_VEHICLE_MSGS_MESSAGE_VEHICLESTATE_H
#define ROS_VEHICLE_MSGS_MESSAGE_VEHICLESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <big_actor_msgs/LatLngAlt.h>

namespace ros_vehicle_msgs
{
template <class ContainerAllocator>
struct VehicleState_
{
  typedef VehicleState_<ContainerAllocator> Type;

  VehicleState_()
    : header()
    , vehicleId(0)
    , vehicleType(0)
    , vehicleNetwork(0)
    , position()
    , heading(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)  {
    }
  VehicleState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vehicleId(0)
    , vehicleType(0)
    , vehicleNetwork(0)
    , position(_alloc)
    , heading(0.0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _vehicleId_type;
  _vehicleId_type vehicleId;

   typedef uint8_t _vehicleType_type;
  _vehicleType_type vehicleType;

   typedef uint8_t _vehicleNetwork_type;
  _vehicleNetwork_type vehicleNetwork;

   typedef  ::big_actor_msgs::LatLngAlt_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _vz_type;
  _vz_type vz;




  typedef boost::shared_ptr< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleState_

typedef ::ros_vehicle_msgs::VehicleState_<std::allocator<void> > VehicleState;

typedef boost::shared_ptr< ::ros_vehicle_msgs::VehicleState > VehicleStatePtr;
typedef boost::shared_ptr< ::ros_vehicle_msgs::VehicleState const> VehicleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'ros_vehicle_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/ros_vehicle_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'big_actor_msgs': ['/home/eloi/bigactorrte/ros_workspace/src/big_actor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d84f85c3ed5cd38dd484eebcb983d077";
  }

  static const char* value(const ::ros_vehicle_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd84f85c3ed5cd38dULL;
  static const uint64_t static_value2 = 0xd484eebcb983d077ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_vehicle_msgs/VehicleState";
  }

  static const char* value(const ::ros_vehicle_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header                      header\n\
uint64                      vehicleId\n\
uint8                       vehicleType\n\
uint8                       vehicleNetwork\n\
big_actor_msgs/LatLngAlt    position\n\
float32                     heading\n\
float32                     vx\n\
float32                     vy\n\
float32                     vz\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: big_actor_msgs/LatLngAlt\n\
float64 latitude\n\
float64 longitude\n\
float64 altitude\n\
";
  }

  static const char* value(const ::ros_vehicle_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vehicleId);
      stream.next(m.vehicleType);
      stream.next(m.vehicleNetwork);
      stream.next(m.position);
      stream.next(m.heading);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct VehicleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_vehicle_msgs::VehicleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_vehicle_msgs::VehicleState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vehicleId: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.vehicleId);
    s << indent << "vehicleType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicleType);
    s << indent << "vehicleNetwork: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicleNetwork);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::big_actor_msgs::LatLngAlt_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<float>::stream(s, indent + "  ", v.vz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_VEHICLE_MSGS_MESSAGE_VEHICLESTATE_H

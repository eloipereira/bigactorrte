"""autogenerated by genpy from big_actor_msgs/Connectivity.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import big_actor_msgs.msg

class Connectivity(genpy.Message):
  _md5sum = "336d33e3fadbc313014484c00766aaff"
  _type = "big_actor_msgs/Connectivity"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).
uint64 srcVehicleId           # First participating vehicle
uint64 dstVehicleId           # Second participating vehicle
Network network               # Network used for this connection

================================================================================
MSG: big_actor_msgs/Network
uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).
uint8 type                    # Network type (Physical Layer).
	uint8 NT_NONE=0
	uint8 NT_ETHERNET_10M=1
	uint8 NT_ETHERNET_100M=2
	uint8 NT_ETHERNET_1G=3
	uint8 NT_ETHERNET_10G=4
	uint8 NT_WIFI_2MB=10
	uint8 NT_WIFI_11MB=11
	uint8 NT_WIFI_27MB=12
	uint8 NT_WIFI_54MB=13
	uint8 NT_WIFI_600MB=14
	uint8 NT_WIFI_1300MB=15
	uint8 NT_WIFI_7000MB=16
	uint8 NT_MESH_500kB=20
	uint8 NT_ACOUSTIC_7kB=30
	uint8 NT_ACOUSTIC_9kB=31
	uint8 NT_ACOUSTIC_14kB=32
	uint8 NT_ACOUSTIC_31kB=33
    uint8 NT_PICCOLO=40
    uint8 NT_AIS=50
uint32 address                # TCP/IP network address, Piccolo channel number, ...
uint32 mask                   # TCP/IP network mask or zero if not applicable
"""
  __slots__ = ['timeStamp','srcVehicleId','dstVehicleId','network']
  _slot_types = ['uint64','uint64','uint64','big_actor_msgs/Network']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timeStamp,srcVehicleId,dstVehicleId,network

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Connectivity, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timeStamp is None:
        self.timeStamp = 0
      if self.srcVehicleId is None:
        self.srcVehicleId = 0
      if self.dstVehicleId is None:
        self.dstVehicleId = 0
      if self.network is None:
        self.network = big_actor_msgs.msg.Network()
    else:
      self.timeStamp = 0
      self.srcVehicleId = 0
      self.dstVehicleId = 0
      self.network = big_actor_msgs.msg.Network()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4QB2I.pack(_x.timeStamp, _x.srcVehicleId, _x.dstVehicleId, _x.network.timeStamp, _x.network.type, _x.network.address, _x.network.mask))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.network is None:
        self.network = big_actor_msgs.msg.Network()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.timeStamp, _x.srcVehicleId, _x.dstVehicleId, _x.network.timeStamp, _x.network.type, _x.network.address, _x.network.mask,) = _struct_4QB2I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4QB2I.pack(_x.timeStamp, _x.srcVehicleId, _x.dstVehicleId, _x.network.timeStamp, _x.network.type, _x.network.address, _x.network.mask))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.network is None:
        self.network = big_actor_msgs.msg.Network()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.timeStamp, _x.srcVehicleId, _x.dstVehicleId, _x.network.timeStamp, _x.network.type, _x.network.address, _x.network.mask,) = _struct_4QB2I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4QB2I = struct.Struct("<4QB2I")

"""autogenerated by genpy from big_actor_msgs/Vehicle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import big_actor_msgs.msg

class Vehicle(genpy.Message):
  _md5sum = "6a2ecde8dc46fa2f20f77fe7b2d94457"
  _type = "big_actor_msgs/Vehicle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).
uint64 vehicle_ttl            # Time-to-live. If message is not updated, it is removed from sse
uint64 vehicleId              # Unique vehicle id
LatLngAlt position            # Vehicle position
float32 heading               # Vehicle heading
uint32 taskId                 # Currently processed task
uint8 taskState               # see Task.status
uint8 vehicleState            # Status of the vehicle
    uint8 VS_NONE=0
    uint8 VS_IDLE=1           # Vehicle idles
    uint8 VS_BUSY=2           # Vehicle is working at task specified in taskId
uint8 vehicleType
    uint8 VT_NONE=0
    uint8 VT_QUADROTOR=1
    uint8 VT_VESSEL=2 
    uint8 VT_DRIFTER=3
    uint8 VT_MODEL_AIRPLANE=4
    uint8 VT_GROUND_STATION=5
string name                   # Vehicle name
Network[] networks            # Networks known to the vehicle.

================================================================================
MSG: big_actor_msgs/LatLngAlt
float64 latitude
float64 longitude
float64 altitude
================================================================================
MSG: big_actor_msgs/Network
uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).
uint8 type                    # Network type (Physical Layer).
	uint8 NT_NONE=0
	uint8 NT_ETHERNET_10M=1
	uint8 NT_ETHERNET_100M=2
	uint8 NT_ETHERNET_1G=3
	uint8 NT_ETHERNET_10G=4
	uint8 NT_WIFI_2MB=10
	uint8 NT_WIFI_11MB=11
	uint8 NT_WIFI_27MB=12
	uint8 NT_WIFI_54MB=13
	uint8 NT_WIFI_600MB=14
	uint8 NT_WIFI_1300MB=15
	uint8 NT_WIFI_7000MB=16
	uint8 NT_MESH_500kB=20
	uint8 NT_ACOUSTIC_7kB=30
	uint8 NT_ACOUSTIC_9kB=31
	uint8 NT_ACOUSTIC_14kB=32
	uint8 NT_ACOUSTIC_31kB=33
    uint8 NT_PICCOLO=40
    uint8 NT_AIS=50
uint32 address                # TCP/IP network address, Piccolo channel number, ...
uint32 mask                   # TCP/IP network mask or zero if not applicable
"""
  # Pseudo-constants
  VS_NONE = 0
  VS_IDLE = 1
  VS_BUSY = 2
  VT_NONE = 0
  VT_QUADROTOR = 1
  VT_VESSEL = 2
  VT_DRIFTER = 3
  VT_MODEL_AIRPLANE = 4
  VT_GROUND_STATION = 5

  __slots__ = ['timeStamp','vehicle_ttl','vehicleId','position','heading','taskId','taskState','vehicleState','vehicleType','name','networks']
  _slot_types = ['uint64','uint64','uint64','big_actor_msgs/LatLngAlt','float32','uint32','uint8','uint8','uint8','string','big_actor_msgs/Network[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timeStamp,vehicle_ttl,vehicleId,position,heading,taskId,taskState,vehicleState,vehicleType,name,networks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Vehicle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timeStamp is None:
        self.timeStamp = 0
      if self.vehicle_ttl is None:
        self.vehicle_ttl = 0
      if self.vehicleId is None:
        self.vehicleId = 0
      if self.position is None:
        self.position = big_actor_msgs.msg.LatLngAlt()
      if self.heading is None:
        self.heading = 0.
      if self.taskId is None:
        self.taskId = 0
      if self.taskState is None:
        self.taskState = 0
      if self.vehicleState is None:
        self.vehicleState = 0
      if self.vehicleType is None:
        self.vehicleType = 0
      if self.name is None:
        self.name = ''
      if self.networks is None:
        self.networks = []
    else:
      self.timeStamp = 0
      self.vehicle_ttl = 0
      self.vehicleId = 0
      self.position = big_actor_msgs.msg.LatLngAlt()
      self.heading = 0.
      self.taskId = 0
      self.taskState = 0
      self.vehicleState = 0
      self.vehicleType = 0
      self.name = ''
      self.networks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3Q3dfI3B.pack(_x.timeStamp, _x.vehicle_ttl, _x.vehicleId, _x.position.latitude, _x.position.longitude, _x.position.altitude, _x.heading, _x.taskId, _x.taskState, _x.vehicleState, _x.vehicleType))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.networks)
      buff.write(_struct_I.pack(length))
      for val1 in self.networks:
        _x = val1
        buff.write(_struct_QB2I.pack(_x.timeStamp, _x.type, _x.address, _x.mask))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = big_actor_msgs.msg.LatLngAlt()
      if self.networks is None:
        self.networks = None
      end = 0
      _x = self
      start = end
      end += 59
      (_x.timeStamp, _x.vehicle_ttl, _x.vehicleId, _x.position.latitude, _x.position.longitude, _x.position.altitude, _x.heading, _x.taskId, _x.taskState, _x.vehicleState, _x.vehicleType,) = _struct_3Q3dfI3B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.networks = []
      for i in range(0, length):
        val1 = big_actor_msgs.msg.Network()
        _x = val1
        start = end
        end += 17
        (_x.timeStamp, _x.type, _x.address, _x.mask,) = _struct_QB2I.unpack(str[start:end])
        self.networks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3Q3dfI3B.pack(_x.timeStamp, _x.vehicle_ttl, _x.vehicleId, _x.position.latitude, _x.position.longitude, _x.position.altitude, _x.heading, _x.taskId, _x.taskState, _x.vehicleState, _x.vehicleType))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.networks)
      buff.write(_struct_I.pack(length))
      for val1 in self.networks:
        _x = val1
        buff.write(_struct_QB2I.pack(_x.timeStamp, _x.type, _x.address, _x.mask))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = big_actor_msgs.msg.LatLngAlt()
      if self.networks is None:
        self.networks = None
      end = 0
      _x = self
      start = end
      end += 59
      (_x.timeStamp, _x.vehicle_ttl, _x.vehicleId, _x.position.latitude, _x.position.longitude, _x.position.altitude, _x.heading, _x.taskId, _x.taskState, _x.vehicleState, _x.vehicleType,) = _struct_3Q3dfI3B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.networks = []
      for i in range(0, length):
        val1 = big_actor_msgs.msg.Network()
        _x = val1
        start = end
        end += 17
        (_x.timeStamp, _x.type, _x.address, _x.mask,) = _struct_QB2I.unpack(str[start:end])
        self.networks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3Q3dfI3B = struct.Struct("<3Q3dfI3B")
_struct_QB2I = struct.Struct("<QB2I")

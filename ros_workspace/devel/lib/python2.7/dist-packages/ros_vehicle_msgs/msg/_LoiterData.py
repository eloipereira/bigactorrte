"""autogenerated by genpy from ros_vehicle_msgs/LoiterData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LoiterData(genpy.Message):
  _md5sum = "bf7af9921d5d304c4f893059282c81fb"
  _type = "ros_vehicle_msgs/LoiterData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool active             #have loiter definition 
uint16 radius           #radius of loiter in metters  
uint16 time_sec         #time in seconds to be in loiter
uint16 times            #number of loiters to do 
bool clockwise          #go clockwise direction    

"""
  __slots__ = ['active','radius','time_sec','times','clockwise']
  _slot_types = ['bool','uint16','uint16','uint16','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       active,radius,time_sec,times,clockwise

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LoiterData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.active is None:
        self.active = False
      if self.radius is None:
        self.radius = 0
      if self.time_sec is None:
        self.time_sec = 0
      if self.times is None:
        self.times = 0
      if self.clockwise is None:
        self.clockwise = False
    else:
      self.active = False
      self.radius = 0
      self.time_sec = 0
      self.times = 0
      self.clockwise = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B3HB.pack(_x.active, _x.radius, _x.time_sec, _x.times, _x.clockwise))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.active, _x.radius, _x.time_sec, _x.times, _x.clockwise,) = _struct_B3HB.unpack(str[start:end])
      self.active = bool(self.active)
      self.clockwise = bool(self.clockwise)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B3HB.pack(_x.active, _x.radius, _x.time_sec, _x.times, _x.clockwise))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.active, _x.radius, _x.time_sec, _x.times, _x.clockwise,) = _struct_B3HB.unpack(str[start:end])
      self.active = bool(self.active)
      self.clockwise = bool(self.clockwise)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B3HB = struct.Struct("<B3HB")

"""autogenerated by genpy from ros_vehicle_msgs/TrackStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class TrackStatus(genpy.Message):
  _md5sum = "e3e88376caed1fb68981db1f23905023"
  _type = "ros_vehicle_msgs/TrackStatus"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header  header
uint64  vehicleId        # id of the vehicle
uint16  targetWP       # id of the target waypoint   
uint16  currWP         # id of the current waypoint    
bool    finished           # just arrived
bool    started            # just started
uint64  eta              # time to arrive
float32 distanceTo      # distance to WP
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','vehicleId','targetWP','currWP','finished','started','eta','distanceTo']
  _slot_types = ['std_msgs/Header','uint64','uint16','uint16','bool','bool','uint64','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,vehicleId,targetWP,currWP,finished,started,eta,distanceTo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vehicleId is None:
        self.vehicleId = 0
      if self.targetWP is None:
        self.targetWP = 0
      if self.currWP is None:
        self.currWP = 0
      if self.finished is None:
        self.finished = False
      if self.started is None:
        self.started = False
      if self.eta is None:
        self.eta = 0
      if self.distanceTo is None:
        self.distanceTo = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.vehicleId = 0
      self.targetWP = 0
      self.currWP = 0
      self.finished = False
      self.started = False
      self.eta = 0
      self.distanceTo = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Q2H2BQf.pack(_x.vehicleId, _x.targetWP, _x.currWP, _x.finished, _x.started, _x.eta, _x.distanceTo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.vehicleId, _x.targetWP, _x.currWP, _x.finished, _x.started, _x.eta, _x.distanceTo,) = _struct_Q2H2BQf.unpack(str[start:end])
      self.finished = bool(self.finished)
      self.started = bool(self.started)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Q2H2BQf.pack(_x.vehicleId, _x.targetWP, _x.currWP, _x.finished, _x.started, _x.eta, _x.distanceTo))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.vehicleId, _x.targetWP, _x.currWP, _x.finished, _x.started, _x.eta, _x.distanceTo,) = _struct_Q2H2BQf.unpack(str[start:end])
      self.finished = bool(self.finished)
      self.started = bool(self.started)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Q2H2BQf = struct.Struct("<Q2H2BQf")
_struct_3I = struct.Struct("<3I")

"""autogenerated by genpy from ros_vehicle_msgs/Waypoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import big_actor_msgs.msg
import ros_vehicle_msgs.msg
import std_msgs.msg

class Waypoint(genpy.Message):
  _md5sum = "b9b6849ca874b55bd9f22fcc2f58a0b1"
  _type = "ros_vehicle_msgs/Waypoint"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header                      header
uint16                      waypointId
uint16                      nextWp
uint16                      previousWp
bool                        start
bool                        stop
bool                        home
big_actor_msgs/LatLngAlt    position
LoiterData                  loiter

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: big_actor_msgs/LatLngAlt
float64 latitude
float64 longitude
float64 altitude
================================================================================
MSG: ros_vehicle_msgs/LoiterData
bool active             #have loiter definition 
uint16 radius           #radius of loiter in metters  
uint16 time_sec         #time in seconds to be in loiter
uint16 times            #number of loiters to do 
bool clockwise          #go clockwise direction    

"""
  __slots__ = ['header','waypointId','nextWp','previousWp','start','stop','home','position','loiter']
  _slot_types = ['std_msgs/Header','uint16','uint16','uint16','bool','bool','bool','big_actor_msgs/LatLngAlt','ros_vehicle_msgs/LoiterData']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,waypointId,nextWp,previousWp,start,stop,home,position,loiter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Waypoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.waypointId is None:
        self.waypointId = 0
      if self.nextWp is None:
        self.nextWp = 0
      if self.previousWp is None:
        self.previousWp = 0
      if self.start is None:
        self.start = False
      if self.stop is None:
        self.stop = False
      if self.home is None:
        self.home = False
      if self.position is None:
        self.position = big_actor_msgs.msg.LatLngAlt()
      if self.loiter is None:
        self.loiter = ros_vehicle_msgs.msg.LoiterData()
    else:
      self.header = std_msgs.msg.Header()
      self.waypointId = 0
      self.nextWp = 0
      self.previousWp = 0
      self.start = False
      self.stop = False
      self.home = False
      self.position = big_actor_msgs.msg.LatLngAlt()
      self.loiter = ros_vehicle_msgs.msg.LoiterData()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3H3B3dB3HB.pack(_x.waypointId, _x.nextWp, _x.previousWp, _x.start, _x.stop, _x.home, _x.position.latitude, _x.position.longitude, _x.position.altitude, _x.loiter.active, _x.loiter.radius, _x.loiter.time_sec, _x.loiter.times, _x.loiter.clockwise))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = big_actor_msgs.msg.LatLngAlt()
      if self.loiter is None:
        self.loiter = ros_vehicle_msgs.msg.LoiterData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.waypointId, _x.nextWp, _x.previousWp, _x.start, _x.stop, _x.home, _x.position.latitude, _x.position.longitude, _x.position.altitude, _x.loiter.active, _x.loiter.radius, _x.loiter.time_sec, _x.loiter.times, _x.loiter.clockwise,) = _struct_3H3B3dB3HB.unpack(str[start:end])
      self.start = bool(self.start)
      self.stop = bool(self.stop)
      self.home = bool(self.home)
      self.loiter.active = bool(self.loiter.active)
      self.loiter.clockwise = bool(self.loiter.clockwise)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3H3B3dB3HB.pack(_x.waypointId, _x.nextWp, _x.previousWp, _x.start, _x.stop, _x.home, _x.position.latitude, _x.position.longitude, _x.position.altitude, _x.loiter.active, _x.loiter.radius, _x.loiter.time_sec, _x.loiter.times, _x.loiter.clockwise))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = big_actor_msgs.msg.LatLngAlt()
      if self.loiter is None:
        self.loiter = ros_vehicle_msgs.msg.LoiterData()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.waypointId, _x.nextWp, _x.previousWp, _x.start, _x.stop, _x.home, _x.position.latitude, _x.position.longitude, _x.position.altitude, _x.loiter.active, _x.loiter.radius, _x.loiter.time_sec, _x.loiter.times, _x.loiter.clockwise,) = _struct_3H3B3dB3HB.unpack(str[start:end])
      self.start = bool(self.start)
      self.stop = bool(self.stop)
      self.home = bool(self.home)
      self.loiter.active = bool(self.loiter.active)
      self.loiter.clockwise = bool(self.loiter.clockwise)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_3H3B3dB3HB = struct.Struct("<3H3B3dB3HB")

"""autogenerated by genpy from ros_vehicle_msgs/GetLocationsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetLocationsRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "ros_vehicle_msgs/GetLocationsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetLocationsRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from ros_vehicle_msgs/GetLocationsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import big_actor_msgs.msg

class GetLocationsResponse(genpy.Message):
  _md5sum = "622050f7bf06629d3ce9177375f41075"
  _type = "ros_vehicle_msgs/GetLocationsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """big_actor_msgs/Location[] locations

================================================================================
MSG: big_actor_msgs/Location
uint64 timeStamp              # Last update timestamp in milliseconds since the Epoch (1970-01-01 00:00:00.000 UTC).
uint64 location_ttl           #	Time-to-live. If message is not updated, it is removed from sse
uint32 locationId             # Unique location id
LatLng[] boundaries           # Location vertices (polygon)
float32 minimumAltitude       # Lower altitude bound of the location
float32 maximumAltitude       # Upper altitude bound of the location
uint8 locationType
    uint8 LT_NONE=0
    uint8 LT_SURFACE=1
    uint8 LT_AIR_SPACE=2
    uint8 LT_UNDERWATER=3
    uint8 LT_OIL_SPILL=4
string name                   # Location name

================================================================================
MSG: big_actor_msgs/LatLng
float64 latitude
float64 longitude
"""
  __slots__ = ['locations']
  _slot_types = ['big_actor_msgs/Location[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       locations

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetLocationsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.locations is None:
        self.locations = []
    else:
      self.locations = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.locations)
      buff.write(_struct_I.pack(length))
      for val1 in self.locations:
        _x = val1
        buff.write(_struct_2QI.pack(_x.timeStamp, _x.location_ttl, _x.locationId))
        length = len(val1.boundaries)
        buff.write(_struct_I.pack(length))
        for val2 in val1.boundaries:
          _x = val2
          buff.write(_struct_2d.pack(_x.latitude, _x.longitude))
        _x = val1
        buff.write(_struct_2fB.pack(_x.minimumAltitude, _x.maximumAltitude, _x.locationType))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.locations is None:
        self.locations = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.locations = []
      for i in range(0, length):
        val1 = big_actor_msgs.msg.Location()
        _x = val1
        start = end
        end += 20
        (_x.timeStamp, _x.location_ttl, _x.locationId,) = _struct_2QI.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.boundaries = []
        for i in range(0, length):
          val2 = big_actor_msgs.msg.LatLng()
          _x = val2
          start = end
          end += 16
          (_x.latitude, _x.longitude,) = _struct_2d.unpack(str[start:end])
          val1.boundaries.append(val2)
        _x = val1
        start = end
        end += 9
        (_x.minimumAltitude, _x.maximumAltitude, _x.locationType,) = _struct_2fB.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        self.locations.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.locations)
      buff.write(_struct_I.pack(length))
      for val1 in self.locations:
        _x = val1
        buff.write(_struct_2QI.pack(_x.timeStamp, _x.location_ttl, _x.locationId))
        length = len(val1.boundaries)
        buff.write(_struct_I.pack(length))
        for val2 in val1.boundaries:
          _x = val2
          buff.write(_struct_2d.pack(_x.latitude, _x.longitude))
        _x = val1
        buff.write(_struct_2fB.pack(_x.minimumAltitude, _x.maximumAltitude, _x.locationType))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.locations is None:
        self.locations = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.locations = []
      for i in range(0, length):
        val1 = big_actor_msgs.msg.Location()
        _x = val1
        start = end
        end += 20
        (_x.timeStamp, _x.location_ttl, _x.locationId,) = _struct_2QI.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.boundaries = []
        for i in range(0, length):
          val2 = big_actor_msgs.msg.LatLng()
          _x = val2
          start = end
          end += 16
          (_x.latitude, _x.longitude,) = _struct_2d.unpack(str[start:end])
          val1.boundaries.append(val2)
        _x = val1
        start = end
        end += 9
        (_x.minimumAltitude, _x.maximumAltitude, _x.locationType,) = _struct_2fB.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        self.locations.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d = struct.Struct("<2d")
_struct_2fB = struct.Struct("<2fB")
_struct_2QI = struct.Struct("<2QI")
class GetLocations(object):
  _type          = 'ros_vehicle_msgs/GetLocations'
  _md5sum = '622050f7bf06629d3ce9177375f41075'
  _request_class  = GetLocationsRequest
  _response_class = GetLocationsResponse
